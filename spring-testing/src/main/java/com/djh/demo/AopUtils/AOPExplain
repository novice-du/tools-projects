SpringAOP默认代理方式是JDK动态代理，目标对象必须有接口
        另一种代理方式是：cglib动态代理，如果目标对象实现了接口，默认使用JDK动态代理实现AOP，也可以强制使用cglib实现AOP
                          如果目标对象没有实现接口，则必须使用cglib库，spring会自动在JDK动态代理和cglib之间转换
                          如何使用cglib实现AOP：
                            1.添加cglib库
                            2.在spring配置文件中加入<aop:aspectj-autoproxy proxy-target-class="true"/>
        两种动态代理的区别：
            1.JDK动态代理只能对实现了接口的类生成代理，而不能针对类
            2.cglib是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法因为是继承，所以最好该类或方法最好不要声明成final
Spring中存在5种通知（advice）
    Before：在目标方法被调用之前调用（前置通知）
    AfterReturning：在某连接点正常完成后执行的通知(后置通知)
    After：当某连接点退出的时候执行的通知（最终通知）
           后置通知和最终通知的区别: 目标业务产生异常时，后置通知不执行，最终通知执行
    Around：拦截对目标对象方法的调用（环绕通知）
            会中断目标业务的执行，可以通过ProceedingJoinPoint中的proceed()方法，让目标业务继续执行
    Throws：当目标方法抛出异常时调用（异常通知）
